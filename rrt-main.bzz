include "vec2.bzz"
include "string.bzz"

# constants
XDIM = 500.0
YDIM = 500.0
EPSILON = 10.0  # distance from newely sampled node
NUMNODES = 100  # max iterations
NUMNODES_C = 0  # current number of nodes
RADIUS = 15.0   # radius to look for parent


# RRT* specific functions
##########################################################

# distance between two nodes
function point_distance(start, end){
    return math.vec2.dis(start, end)
}

# create a random node (vector)
function get_random_point(){
    var rand_x = rng.uniform(1.0) * XDIM
    var rand_y = rng.uniform(1.0) * YDIM
    return math.vec2.new(rand_x, rand_y)
}

#create a new node
function new_node(point, cost, parent){
    return {.point = point, .cost = cost, .parent = parent}
}

# return the next node within the allowed epsilon
function step_from_to(start, end){
    #if(point_distance(start, end) < EPSILON){
    #    return node2
    #} else {
    #    var diff = math.vec2.sub(end, start)
    #    var node_within_epsilon = math.vec2.newp(EPSILON, math.vec2.angle(diff))
    #    return math.vec2.add(start, node_within_epsilon)
    #}
    if(point_distance(start, end) < EPSILON){
        return end
    } else {
        theta = math.vec2.angle(math.vec2.sub(end, start))
        return math.vec2.add(start, math.vec2.newp(EPSILON, theta))
    }
}

#choose parent
function choose_parent(nn, newnode, nodes){
    var result = new_node(newnode.point, newnode.price, newnode.parent)
    var i = 0
    var nn_id = 0
    while(i < size(nodes)){
        var current_point_distance = point_distance(nodes[i].point, newnode.point)
        var nn_point_distance = point_distance(nn.point, newnode.point)
        if(current_point_distance < RADIUS and nodes[i].cost + current_point_distance < nn.cost + nn_point_distance){
            nn = nodes[i]
            nn_id = i
        } #endif
        i = i + 1
    } #endwhile
    result.cost = nn.cost + point_distance(nn.point, newnode.point)
    result.parent = nn_id
    return result
}

# rewire solution
function rewire(nodes, newnode){
    var i = 0
    while(i < size(nodes)){
        var p = nodes[i]
        var current_point_distance = point_distance(p.point, newnode.point)
        if(p != newnode.parent and current_point_distance < RADIUS and newnode.cost + current_point_distance < p.cost){
            nodes[i] = new_node(newnode.point, newnode.cost, newnode.parent)
            log("Parent: ", newnode.parent)
        } #endif
        i = i + 1
    } # endwhile
    return nodes
}

# write points
function print_solution(nodes){
    var nn = new_node(nodes[0].point, nodes[0].cost, nodes[0].parent)
    var i = 0
    log("Printing solutions...", size(nodes))
    while(i < size(nodes)){
        var current_point_distance = point_distance(nodes[i].point, end_point)
        var nn_point_distance = point_distance(nn.point, end_point)
        if(current_point_distance < nn_point_distance){
            nn = nodes[i]
            log("Placing: ", i, nodes[i].parent)
        }
        i = i + 1
    }

}


# BUZZ functions
##########################################################
function init() {
    # globals
    start_point = math.vec2.new(10.0, 10.0)
    end_point = math.vec2.new(300.0, 300.0)
    nodes = {}
    nodes[NUMNODES_C] = {
        .point = start_point,
        .cost = 0.0,
        .parent = nil
    }
    NUMNODES_C = NUMNODES_C + 1
}

function step() {
    var i = 0
    log("Nodes: ", size(nodes), ", ", NUMNODES)
    while(i < NUMNODES){
        var rand = new_node(get_random_point(), 0.0, nil)
        var nn = new_node(nodes[0].point, nodes[0].cost, nodes[0].parent)
        var j = 0
        while(j < size(nodes)){
            var current_point_distance = point_distance(nodes[j].point, rand.point)
            var nn_point_distance = point_distance(nodes[j].point, nn.point)
            if(current_point_distance < nn_point_distance){
                nn = nodes[j]
            }
            j = j + 1
        } #end node while
        var interpolated_node = step_from_to(nn.point, rand.point)
        var newnode = new_node(interpolated_node, 0.0, nil)
        var parent_choice_result = choose_parent(nn, newnode, nodes)
        nodes[NUMNODES_C] = new_node(parent_choice_result.point, parent_choice_result.cost, parent_choice_result.parent)
        NUMNODES_C = NUMNODES_C + 1
        #nodes = rewire(nodes, newnode)
        i = i + 1
    }#end main while
    print_solution(nodes)
    log("Done...")
}

function destroy() {
}
