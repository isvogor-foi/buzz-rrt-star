# ROBOT constants (drive function should be updated)
R = 0.029112741
L = 0.127


# functions
##########################################################
function angle_handler(ang) {
	while(ang > math.pi)
		ang = ang - 2.0 * math.pi
	while(ang < -math.pi)
		ang = ang + 2.0 * math.pi
	return ang
}

# the avanti function
function avanti(v, omega){
	var speed_multiplier = 7.0
	var v_l = 0
	var v_r = 0
	var critical_angle = 35.0 * math.pi / 180.0
	omega = angle_handler(omega)

	# check for obstacles
	var res = get_ir_obst_avg()
	# res.distance needs to be sufficiently high because the following code, in rare occasions
	# can move robot (left-right) inf. Only if one sensor is activated and angle == 0
	# instead of using avg, use individual sensor readings to avoid this
	if(obstacle_detected == 1 or (math.abs(res.angle) < 1.0 and res.distance > 0.009)){
		#log("Maybe stop...", res.distance, ", ", obstacle_detected, ", a: ", math.abs(res.angle))
		obstacle_detected = 1
		if(math.abs(res.angle) > 1.4){
			# i avoided the obstacle... regenerate
			log("In avanti...")
			obstacle_detected = 0
			PATH_RESET_NECESSARY = 1
			set_wheels(0.0, 0.0)
			return
		} else {
			if(res.angle >= 0.0){
				set_wheels(v, -v)
				return
			} else {
				set_wheels(-v, v)
				return
			}
		}
	}

	if(omega > critical_angle){
		v_l = -v * speed_multiplier
		v_r = v * speed_multiplier
	} else if (omega < -critical_angle){
		v_l = v * speed_multiplier
		v_r = -v * speed_multiplier
	}else {
		v_l = (( 2.0 * v ) - (omega * L )) / (2.0 * R)
		v_r = (( 2.0 * v ) + (omega * L )) / (2.0 * R)
	}
	set_wheels(v_l, v_r)
}

# the old avanti function
function vecchio_avanti(v, omega){
	omega = angle_handler(omega)
	var speed_multiplier = 7.0
	var v_l = 0
	var v_r = 0
	var critical_angle = 45.0 * math.pi / 180.0
	if(omega > critical_angle){
		v_l = - v * speed_multiplier
		v_r = v * speed_multiplier
	} else if (omega < -critical_angle){
		v_l = v * speed_multiplier
		v_r = -v * speed_multiplier
	}else {
		v_l = (( 2.0 * v ) - (omega * L )) / (2.0 * R)
		v_r = (( 2.0 * v ) + (omega * L )) / (2.0 * R)
	}
	set_wheels(v_l, v_r)
}

# the old avanti function
function fortissimo(v, omega){
	omega = angle_handler(omega)
	v_l = (( 2.0 * v ) - (omega * L )) / (2.0 * R)
	v_r = (( 2.0 * v ) + (omega * L )) / (2.0 * R)
	set_wheels(v_l, v_r)
}
