# ARGOS (in meters)

A_WIDTH = 3.0
A_HEIGHT = 3.0

# meters to rrt dim
function meters_to_rrtdim(value){
    return value / (A_WIDTH / XDIM)
}

#  rrt dim to meters
function rrtdim_to_meters(value){
    return value * (A_WIDTH / XDIM)
}

# to argos coordinates
function to_argos(point){
    var x = (point.x - XDIM / 2.0) * (A_HEIGHT / XDIM)
    var y = (point.y - YDIM / 2.0) * (A_WIDTH / YDIM)
    return math.vec2.new(x, y)
}

# from argos coordinates
function from_argos(point){
    var x = point.x * (XDIM / A_HEIGHT) + XDIM / 2.0
    var y = point.y * (YDIM / A_WIDTH) + YDIM / 2.0
    return math.vec2.new(x, y)
}

function argos_draw_obstacles_dis(obstacles){
    var obs = {}
    var i = 0
    while(i < size(obstacles)){
        #var temp = to_argos(obstacles[i].position)
        var temp = obstacles[i].position
        var radius = rrtdim_to_meters(obstacles[i].radius)
        if(obstacles[i].type == 1){
            radius = radius * 2
        }
        #log("Obs: ", temp.x, ", ", temp.y, ", ", rrtdim_to_meters(obstacles[i].radius))
        obs[i] = {
            .0 = temp.x,
            .1 = temp.y,
            .2 = radius,
            .3 = obstacles[i].type
        }
        i = i + 1
    }
    draw_obstacles(obs)
}
