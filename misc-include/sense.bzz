IR_SENSOR_RANGE = 0.2

# argos coordinates for the map
DIM_MAP = 30.0

function get_ir_obst(){
    var res = math.vec2.new(0, 0)
    var angles_triggered = {}
    res = math.vec2.scale(reduce(proximity, function(key, value, acc){
        var tmp = math.vec2.newp(value.value, value.angle)
        acc = math.vec2.add(acc, tmp)

        var angle = angle_handler(value.angle) + pose.orientation.yaw

        if(value.value != 0.0){
            var robot_position = math.vec2.new(pose.position.x, pose.position.y)
            var obstacle_position = math.vec2.add(robot_position, math.vec2.newp(IR_SENSOR_RANGE, angle))
            #add_obstacle(obstacle_position)
            add_obstacle_dis(obstacle_position)

            angles_triggered[size(angles_triggered)] = value.angle
        }
        return acc
    }, math.vec2.new(0, 0)), 1.0 / size(proximity) )

    return angles_triggered
}

# detect obstacles using IR sensor
function get_ir_obst_avg(){
    var result = {}
    var res = math.vec2.new(0, 0)
    res = math.vec2.scale(reduce(proximity, function(key, value, acc){
        var tmp = math.vec2.newp(value.value, value.angle)
        acc = math.vec2.add(acc, tmp)
        return acc
    }, math.vec2.new(0, 0)), 1.0 / size(proximity) )


    var angle = math.vec2.angle(res)
    result.angle = angle
    result.distance = math.vec2.length(res)
    angle = angle_handler(angle) + pose.orientation.yaw

    if(math.vec2.length(res) != 0.0){
        var robot_position = math.vec2.new(pose.position.x, pose.position.y)
        var obstacle_position = math.vec2.add(robot_position, math.vec2.newp(IR_SENSOR_RANGE, angle))
        #add_obstacle(obstacle_position)
        add_obstacle_dis(obstacle_position)
    }

    return result
}

# add obstacle
function add_obstacle(position){
    discovered_obstacles[size(discovered_obstacles)] = {
        .position = from_argos(math.vec2.new(position.x, position.y)),
        .radius = meters_to_rrtdim(OBSTACLE_RADIUS) # for now constant
    }
}

# add obstacle to the discrete map
function add_obstacle_dis(position){
    position = from_argos(math.vec2.new(position.x, position.y))
    var x = position.x / XDIM * DIM_MAP
    var y = position.y / YDIM * DIM_MAP
    # to map coordinates
    x = (math.round(x) - DIM_MAP / 2.0) * (A_HEIGHT / DIM_MAP)
    y = (math.round(y) - DIM_MAP / 2.0) * (A_WIDTH / DIM_MAP)

    # check if added
    var i = 0
    while(i < size(discovered_obstacles_dis)){
        var current = discovered_obstacles_dis[i]
        if(current.position.x == x and current.position.y == y){
            return
        }
        i = i + 1
    }
    # add
    var obstacle_radius = (A_HEIGHT / DIM_MAP) / 2.0
    discovered_obstacles_dis[size(discovered_obstacles_dis)] = {
        .position = math.vec2.new(x, y),
        .radius = meters_to_rrtdim(obstacle_radius)
    }
}

# larger obstacles
